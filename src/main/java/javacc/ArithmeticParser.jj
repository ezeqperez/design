options{ STATIC = false; JDK_VERSION = "1.8"; }
PARSER_BEGIN(ArithmeticParser)
package javacc;
import modelo.dominio.Indicador;
import modelo.dominio.operaciones.*;
import modelo.dominio.operandos.*;

public class ArithmeticParser {
    Indicador indicadorAdevolver = new Indicador();
    public Indicador getIndicadorAdevolver(){
        return indicadorAdevolver;
    }
}
PARSER_END(ArithmeticParser)

    SKIP :
    {     " "
        | "\t"
        | "\r"
        | "\n"
    }

  TOKEN:{
          <LPAREN: "(">
       |  <RPAREN: ")">
       |  <MULTIPLY:  "*">
       |  <DIVIDE: "/">
       |  <ADD: "+">
       |  <SUBTRACT: "-">
       |  <NUMBER:(["0"-"9"])+>
       |  <CUENTA:(["a"-"z","A"-"Z", "0"-"9"])+>
    }

void Start():{}
    {
        INDICADOR(indicadorAdevolver)
    }
void INDICADOR(Indicador indicador):{}
    {
        POPERANDO(indicador) OPERACION(indicador) SOPERANDO(indicador)
    }
void POPERANDO(Indicador indicador):{}
    {
            <NUMBER>{ indicador.setPrimerOperando(new Valor(token.image)); }
        |   <CUENTA>{ indicador.setPrimerOperando(new CuentaOperando(token.image)); }
    }
void OPERACION(Indicador indicador):{}
    {
            <MULTIPLY>{ indicador.setOperacion(new Multiplicacion()); }
        |   <DIVIDE>{ indicador.setOperacion(new Division()); }
        |   <ADD>{ indicador.setOperacion(new Suma()); }
        |   <SUBTRACT>{ indicador.setOperacion(new Resta()); }
    }
void SOPERANDO(Indicador indicador):{}
    {       LOOKAHEAD(2)
            SUBINDICADOR(indicador)
        |   LOOKAHEAD(2)
            <NUMBER>{ indicador.setSegundoOperando(new Valor(token.image)); }
        |   <CUENTA>{ indicador.setSegundoOperando(new CuentaOperando(token.image)); }
    }
void SUBINDICADOR(Indicador indicador):{
    Indicador subIndicador = new Indicador();
    indicador.setSegundoOperando(subIndicador);
}
    {
        POPERANDO(subIndicador) OPERACION(subIndicador) SOPERANDO(subIndicador)
    }